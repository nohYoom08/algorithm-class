//1번
#pragma warning (disable:4996)
#include <stdio.h>
#include <stdlib.h>

typedef struct listNode
{
	int key;
	struct listNode* link;
}listNode;

listNode* getNode()
{
	listNode* new = (listNode*)malloc(sizeof(listNode));
	new->link = NULL;

	return new;
}

int hashFunction(int key, int M)
{
	return key % M;		//해시함수화
}
int findElement(listNode** headers, int key, int M)
{
	int v = hashFunction(key, M);

	listNode* tmp = headers[v]->link;
	//항상 첫 노드 연결은 '헤더노드 -> link' (헤더노드 / 첫노드 구분)

	int cnt = 1;
	//첫번째 노드로 바로 가있으니 cnt = 1부터 시작
	//headers[v]가 헤더노드

	while (tmp != NULL && tmp->key != key)
	{
		tmp = tmp->link;
		cnt++;	//연결리스트 순회하면서 순번찾기
	}
	if (tmp == NULL)
		//해당 키가 없는 경우
		return 0;
	else
		return cnt;
}
void insertItem(listNode** headers, int key, int M)
{
	int v = hashFunction(key, M);
	//키랑 인수 전달
	listNode* new = getNode();
	new->key = key;

	if (headers[v]->link == NULL)	//빈 해시테이블인 경우
	{
		headers[v]->link = new;
	}
	else	//아닌 경우
	{
		listNode* tmp = headers[v]->link;
		headers[v]->link = new;
		new->link = tmp;
	}

	return;
}

int removeItem(listNode** headers, int key, int M)
{
	int v = hashFunction(key, M);

	listNode* tmp, * tmp2;

	tmp = headers[v]->link;
	tmp2 = NULL;
	int cnt = 1;
	while (tmp != NULL && tmp->key != key)
	{
		tmp2 = tmp;	//순서 주의 (넘어가기 전에 대입해주고 넘어가야댐)
		tmp = tmp->link;
		cnt++;
	}

	if (tmp == NULL)	//빈 해시테이블이거나 찾는 키가 없는 경우
		return 0;
	else
	{
		if (tmp2 == NULL)	//지워야할 노드가 첫 번째 노드
			headers[v]->link = tmp->link;
		else
			//지워야 할 노드가 중간 또는 끝 노드인 경우 (첫 번째가 아닌 경우)
			tmp2->link = tmp->link;
		//항상 기본적인 경우를 먼저 작성하고, 그 다음에 예외처리
		//작성 순서와 코드상 위아래는 항상 일치하지 않는다.

		return cnt;
	}
}
void printList(listNode** headers, int M)
{
	listNode* tmp = NULL;
	for (int i = 0; i < M; i++)
	{
		tmp = headers[i]->link;
		while (tmp != NULL)
		{
			printf("%d ", tmp->key);
			tmp = tmp->link;
		}
	}
	printf("\n");
	return;
}
void initBucketArray(listNode** headers, int M)
{
	for (int i = 0; i < M; i++)
	{
		headers[i] = (listNode*)malloc(sizeof(listNode));
		headers[i]->link = NULL;
	}
	//항상 헤더노드와 첫노드를 기능상으로 구분할 것. 
	//둘은 엄연히 다르고 헤더노드도 항상 공간을 할당받아야 함.
	//그것이 헤더구조체로 따로 선언 된 것이든 아니면 그냥 listNode중 하나든
	//무조건 헤더는 있어야 함.

	return;
}

int main() {
	int M, key, result;
	char fx;
	scanf("%d", &M);
	getchar();

	listNode** headers = (listNode**)malloc(sizeof(listNode*) * M);
	initBucketArray(headers, M);

	scanf("%c", &fx);
	getchar();
	while (fx != 'e')
	{
		switch (fx) {
		case 'i':
			scanf("%d", &key);
			getchar();
			insertItem(headers, key, M);
			break;
		case 's':
			scanf("%d", &key);
			getchar();
			result = findElement(headers, key, M);
			printf("%d\n", result);
			break;
		case 'd':
			scanf("%d", &key);
			getchar();
			result = removeItem(headers, key, M);
			printf("%d\n", result);
			break;
		case 'p':
			printList(headers, M);
			break;
		default:
			break;
		}
		scanf("%c", &fx);
		getchar();
	}

	return 0;
}




//2번
//원형배열 구현 + 구조체 반환 안하고 그냥 함수에서 출력까지 구현
#pragma warning (disable:4996)
#include <stdio.h>
#include <stdlib.h>


int hashFunction(int key, int M)
{
	return key % M;
}

void findElement(int arr[], int key, int M) {
	int v = hashFunction(key, M);

	for (int i = v; i != (v - 1 + M) % M; i = (i + 1) % M)
		//원형큐 구현 (종료조건도 왜 저렇게 함? -> v=0일 때 생각.)
		//증가할 때는 끝항에서 0항으로 넘어가는 경우, 감소할 때는 0항에서 끝항으로 넘어가는 경우 생각
	{
		if (arr[i] == key)	//키가 맞다면
		{
			printf("%d %d\n", i, key);
			return;
		}
	}

	printf("-1\n");	//탐색 실패
	return;
}

void insertItem(int* arr, int key, int M)
{
	int v = hashFunction(key, M);
	int index = v;

	for (int i = v; i != (v - 1 + M) % M; i = (i + 1) % M)
	{
		if (arr[i] == 0)	//버켓이 비어있을 경우
		{
			arr[i] = key;
			printf("%d\n", i);
			return;
		}
		else
			printf("C");
	}

	printf("-1\n"); //삽입 실패
	return;
}

void printList(int arr[], int M)
{
	for (int i = 0; i < M; i++)
		printf("%d ", arr[i]);
	printf("\n");

	return;
}

int main() {
	int M, n, key;
	char fx;

	scanf("%d %d", &M, &n);
	getchar();
	int* arr = (int*)malloc(sizeof(int) * M);

	scanf("%c", &fx);
	getchar();
	while (fx != 'e')
	{
		switch (fx)
		{
		case 'i':
			scanf("%d", &key);
			getchar();
			insertItem(arr, key, M);
			break;

		case 's':
			scanf("%d", &key);
			getchar();
			findElement(arr, key, M);
			break;
		case 'p':
			printList(arr, M);
			break;
		default:
			break;
		}
		scanf("%c", &fx);
		getchar();
	}

	return 0;
}


//3번
#pragma warning (disable:4996)
#include <stdio.h>
#include <stdlib.h>


int hashFunction(int key, int M)	//일중 해시함수
{
	return key % M;
}
int hashFunction2(int key, int q)	//이중 해시함수
{
	return q - (key % q);
}
void findElement(int arr[], int key, int M, int n, int q) {
	int v1 = hashFunction(key, M);
	int v2 = hashFunction2(key, q);	
	int index = v1;		//초기 인덱스는 일중함수 해시값

	int cnt = 0;
	while (cnt < n)
	{
		if (arr[index] == key)
		{
			printf("%d %d\n", index, key);
			return;
		}

		cnt++;
		index = hashFunction(v1 + v2 * cnt, M);		//그 다음은 '일중해시값 + 이중해시값을*cnt'가 인자임
		//이중함수 의미 다시 한번 잘 생각
		//cnt번째 충돌 => cnt + 1 번째 탐색 필요, cnt + 1을 인자에 넣고 해시함수 수행
		//즉 cnt를 올리고 나서 해시함수 실행 (h'(k)가 아니라 h(k)수행. h'(k)는 인자 하나 더 만들어준다는 생각)
	}

	printf("-1\n");	//탐색 실패
	return;
}

void insertItem(int arr[], int key, int M, int q)
{
	int v1 = hashFunction(key, M);
	int v2 = hashFunction2(key, q);
	int index = v1;	//초기 인덱스(해시값)

	int cnt = 0;
	while (cnt < M)
	{
		if (arr[index] == 0)	//빈 버켓인 경우
		{
			arr[index] = key;
			printf("%d\n", index);
			return;
		}
		else
		{
			printf("C");
		}
		cnt++;
		index = hashFunction(v1 + v2 * cnt, M);
	}

	printf("-1\n");	//삽입 실패
	return;
}

void printList(int arr[], int M)
{
	for (int i = 0; i < M; i++)
		printf("%d ", arr[i]);
	printf("\n");

	return;
}

int main() {
	int M, n, q, key;
	char fx;

	scanf("%d %d %d", &M, &n, &q);
	getchar();
	int* arr = (int*)malloc(sizeof(int) * M);

	scanf("%c", &fx);
	getchar();
	while (fx != 'e')
	{
		switch (fx)
		{
		case 'i':
			scanf("%d", &key);
			getchar();
			insertItem(arr, key, M, q);
			break;

		case 's':
			scanf("%d", &key);
			getchar();
			findElement(arr, key, M, n, q);
			break;
		case 'p':
			printList(arr, M);
			break;
		default:
			break;
		}
		scanf("%c", &fx);
		getchar();

		if (fx == 'e')
			printList(arr, M);
	}

	return 0;
}