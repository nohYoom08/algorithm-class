//1번
#pragma warning (disable:4996)
#include <stdio.h>
#include <stdlib.h>
#define MAX_VERTEX 100
typedef struct graphNode {
	int vertex;
	int visit;
	struct graphNode* link;
}graphNode;

typedef struct Graph {
	int n;
	graphNode* adjList[MAX_VERTEX];
}Graph;

void initGraph(Graph* graph) {
	for (int i = 0; i < graph->n; i++)
		graph->adjList[i] = NULL;
}
graphNode* getNode() {
	graphNode* new = (graphNode*)malloc(sizeof(graphNode));
	new->link = NULL;

	return new;
}
void insertVertex(Graph* graph, int vertex1, int vertex2) {
	//결국 삽입함수를 따로 만드는 게 베스트인 것 같다
	int index = vertex1 - 1;

	graphNode* tmp = NULL;
	graphNode* new = getNode();
	new->link = NULL;
	new->vertex = vertex2;
	new->visit = 0;

	tmp = graph->adjList[index];
	if (tmp == NULL) {
		graph->adjList[index] = new;
		return;
	}

	//	printf("tmp->vertex = %d\n", tmp->vertex);
	if (new->vertex < tmp->vertex) {
		//첫 번째 노드부터 새 노드 정점보다 큰 경우(탐색 안하고 바로 삽입)
		new->link = tmp;
		graph->adjList[index] = new;
		//초기 삽입일 땐 tmp가 아닌 시작점에 직접 대입인지 제발 판단
		return;
	}
	//	printf("add loop start\n");
	while (tmp->link != NULL) {
		if (new->vertex < tmp->link->vertex) {
			new->link = tmp->link;
			tmp->link = new;
			break;
		}
		tmp = tmp->link;
	}
	tmp->link = new;
}
void DFS(Graph* graph, int num) {
	if (num > graph->n || num < 1) {
		printf("-1\n");
		return;
	}
	int index = num - 1;
	graphNode* tmp = graph->adjList[index];
	if (tmp->visit == 1)
		return;

	printf("%d\n", num);
	while (tmp != NULL) {
		if (tmp->visit == 0) {
			tmp->visit = 1;
			DFS(graph, tmp->vertex);
		}
		tmp = tmp->link;
	}
	return;
}
void printEdges(Graph* graph, int num) {
	if (num > graph->n || num < 1) {
		printf("-1\n");
		return;
	}

	int index = num - 1;
	graphNode* tmp = graph->adjList[index];

	printf("%d : ", num);
	while (tmp != NULL) {
		printf("%d ",tmp->vertex);
		tmp = tmp->link;
	}
	printf("\n");
	return;
}

int main() {
	int m, s, in, out;
	Graph* graph = (Graph*)malloc(sizeof(Graph));
	scanf("%d %d %d", &graph->n, &m, &s);
	initGraph(graph);

	for (int i = 0; i < m; i++) {
		scanf("%d %d", &in, &out);
		if (in != out) {
			insertVertex(graph, in, out);
			insertVertex(graph, out, in);
		}
		else {
			insertVertex(graph, in, in);
		}
	}

	DFS(graph, s);



	return 0;
}
//갑자기 첫 노드에 정보가 들어가야되네 마네 이런 헛소리 x 충분히 다 구현 가능
//재귀 함수를 잘 볼 것. 재귀의 기본중의 기본, 종료조건 잘 확인하고 방문 전에 방문한다고 visit=1해주어야 함
//정적 배열을 썼다면 최대 개수를 잘 살펴볼 것


//2번
#pragma warning (disable:4996)
#include <stdio.h>
#include <stdlib.h>
#define MAX_VERTEX 1000
int n;
typedef struct {
	int* queue;
	int front, rear;
	int size;
}Queue;
Queue* CreateQueue(int size) {	
	Queue* Q;
	Q = (Queue*)malloc(sizeof(Queue));
	Q->front = 0;
	Q->rear = 0;
	Q->size = size;
	Q->queue = (int*)malloc(sizeof(int) * size);
	for (int i = 0; i < Q->size; i++)
		Q->queue[i] = 0;	//'초기화'
	return Q;
}
int isEmpty(Queue* Q) {
	if (Q->front == Q->rear)
		return 1;
	else
		return 0;
}
int isFull(Queue* Q) {
	if ((Q->rear + 1) % Q->size == Q->front)
		return 1;
	else
		return 0;
}
void printQueue(Queue* Q) {
	for (int i = 0; i < Q->size; i++)
		printf(" %d", Q->queue[i]);
	printf("\n");
}
int enQueue(Queue* Q, int data) {
	if (isFull(Q) == 1) {		
		printf("overflow");
		printQueue(Q);
		return;
	}
	else {
		Q->rear = (Q->rear + 1) % Q->size;
		Q->queue[Q->rear] = data;
	}
}
int deQueue(Queue* Q) {
	if (isEmpty(Q) == 1) {
		printf("underflow");
		return;
	}
	else {
		Q->front = (Q->front + 1) % Q->size;
		int result = Q->queue[Q->front];
		Q->queue[Q->front] = 0;
		return result;
	}
}

void initGraph(int graph[][MAX_VERTEX]) {
}
void insertVertex(int graph[][MAX_VERTEX], int vertex1, int vertex2) {

	int index1, index2;
	index1 = vertex1 - 1;
	index2 = vertex2 - 1;

	graph[index1][index2] = 1;
	graph[index2][index1] = 1;
}

void BFS(Queue*Q, int graph[][MAX_VERTEX], int num) {
	int visited[MAX_VERTEX] = { 0 };
	int index;

	enQueue(Q, num);
	while (!isEmpty(Q)) {
		num = deQueue(Q);
		index = num - 1;
		if (visited[index] == 0) {
			visited[index] = 1;
			printf("%d\n", num);
		}
		for (int i = 0; i < n; i++) {
			if (graph[index][i] == 1 && visited[i]==0) {
				enQueue(Q, i + 1);
			}
		}
	}
}
void printEdges(int graph[][MAX_VERTEX], int num) {
	if (num > n || num < 1) {
		printf("-1\n");
		return;
	}

	int index = num - 1;
	for (int i = 0; i < n; i++)
		if (graph[index][i] != 0)
			printf("%d", i + 1);
	printf("\n");
	return;
}


int main() {
	int m, s, in, out;
	int graph[MAX_VERTEX][MAX_VERTEX] = { 0 };	//이차원 배열 0으로 초기화하는 법
	Queue* Q = CreateQueue(MAX_VERTEX);
	scanf("%d %d %d", &n, &m, &s);

	for (int i = 0; i < m; i++) {
		scanf("%d %d", &in, &out);
		insertVertex(graph, in, out);
	}
	BFS(Q, graph, s);
	return 0;
}
//방문조사를 두 번 해야하는 이유(방문하기 전, 후 둘 다)
//=> 방문하지 않았던 곳을 판별하기 위해 방문조사를 하는 것 + 방문할 곳이 없어 돌아가는 와중에 출력 및 실행을 하면 안 됨 ****